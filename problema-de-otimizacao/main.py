import os
from entrada import Entrada
from calculadora import Calculadora

class OtimizadorCilindro:
    def __init__(self, entrada, calculadora):
        self.entrada = entrada
        self.calculadora = calculadora

    def executar(self):
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')

            # obtendo os inputs do usu√°rio
            volume = self.entrada.obter_volume()
            tem_tampa = self.entrada.obter_tampa()
            custo_base, custo_lateral = self.entrada.obter_custos()
            
            n_bases = 2 if tem_tampa else 1
            
            # calculando dimens√µes √≥timas
            raio, altura, custo_base_total, custo_lateral_total, custo_total = self.calculadora.calcular_dimensoes(
                volume, tem_tampa, custo_base, custo_lateral
            )
            
            # calculando ponto cr√≠tico e derivadas
            ponto_critico = self.calculadora.calcular_ponto_critico(volume, custo_base, custo_lateral, n_bases)
            primeira_derivada = self.calculadora.primeira_derivada(volume, custo_base, custo_lateral, ponto_critico, n_bases)
            segunda_derivada = self.calculadora.verificar_minimo(volume, custo_base, custo_lateral, ponto_critico, n_bases)
            
            self.mostrar_resultados(raio, altura, custo_base_total, custo_lateral_total, custo_total, ponto_critico, primeira_derivada, segunda_derivada)
            
            repetir = input("\nDeseja calcular novamente? (s/n): ").strip().lower()
            if repetir != 's':
                break

    def mostrar_resultados(self, raio, altura, custo_base_total, custo_lateral_total, custo_total, ponto_critico, primeira_derivada, segunda_derivada):
        print("\n=== üìä RESULTADOS DA OTIMIZA√á√ÉO üìä ===")
        print(f"\nDimens√µes √≥timas do recipiente:")
        print(f"üìè Raio: {raio:.2f} cm")
        print(f"üìè Altura: {altura:.2f} cm")
        print(f"üìè Di√¢metro: {2 * raio:.2f} cm")
        
        print(f"\nüí∞ Custos:")
        print(f"üíµ Custo da(s) base(s): R$ {custo_base_total:.2f}")
        print(f"üíµ Custo lateral: R$ {custo_lateral_total:.2f}")
        print(f"üíµ Custo total: R$ {custo_total:.2f}")
        
        print("\n=== üìà DERIVADAS üìà ===")
        print(f"üìç Ponto cr√≠tico (raio √≥timo): {ponto_critico:.2f} cm")
        print(f"üìâ Primeira derivada no ponto cr√≠tico: {primeira_derivada:.2f}")
        print(f"üìà Segunda derivada no ponto cr√≠tico: {segunda_derivada:.2f}")
        
        if segunda_derivada > 0:
            print("‚úÖ Como a segunda derivada √© positiva, confirmamos que √© um ponto de m√≠nimo!")
        else:
            print("‚ùå A segunda derivada n√£o √© positiva, o ponto cr√≠tico n√£o √© um m√≠nimo!")

if __name__ == "__main__":
    entrada = Entrada()
    calculadora = Calculadora()
    otimizador = OtimizadorCilindro(entrada, calculadora)
    otimizador.executar()
