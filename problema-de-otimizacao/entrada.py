import time

class Entrada:

    @staticmethod
    def introducao():
        # Introdu√ß√£o explicativa
        print("\n=== üìè CALCULADORA DE OTIMIZA√á√ÉO DE CILINDRO üìè ===")
        time.sleep(1)
        print("\nBem-vindo √† calculadora de otimiza√ß√£o de cilindros!")
        time.sleep(1)
        
        # Import√¢ncia do exerc√≠cio
        print("\nNeste programa, vamos calcular as dimens√µes √≥timas de um recipiente cil√≠ndrico.")
        time.sleep(1)
        print("\nEsse tipo de otimiza√ß√£o √© importante em muitos cen√°rios, como no design de embalagens,")
        print("onde buscamos minimizar o uso de materiais enquanto mantemos o volume desejado do recipiente.")
        time.sleep(2)
        
        # Conceitos usados (Derivadas)
        print("\nVamos utilizar conceitos de c√°lculo, especificamente derivadas, para encontrar as dimens√µes ideais.")
        time.sleep(1)
        print("\nA derivada √© uma ferramenta matem√°tica que nos ajuda a entender como uma fun√ß√£o muda.")
        print("No caso deste exerc√≠cio, ela ser√° usada para determinar os valores de raio e altura do cilindro")
        print("que minimizam o custo de material, maximizando a efici√™ncia da produ√ß√£o.")
        time.sleep(3)
        
        # Conceito de ponto cr√≠tico
        print("\nUtilizando a primeira e segunda derivada, encontramos o ponto cr√≠tico, que nos d√° o valor ideal do raio.")
        print("A segunda derivada nos ajuda a confirmar que esse ponto √© realmente o de m√≠nimo custo.")
        time.sleep(2)
        
        # Orienta√ß√£o e in√≠cio
        print("\nPressione 'Enter' para come√ßar a inser√ß√£o dos dados.")
        input()

    @staticmethod
    def obter_volume():
        while True:
            print("\n=== üìè CALCULADORA DE OTIMIZA√á√ÉO DE CILINDRO üìè ===")
            volume = input("\nDigite o volume do recipiente em ml (1ml = 1cm¬≥): ")
            
            # Verifica se o volume √© um n√∫mero inteiro ou decimal
            if not volume.replace('.', '', 1).isdigit():
                print("‚ùå ERRO: O volume deve ser um n√∫mero v√°lido!")
                continue
            
            volume = float(volume)
            if volume <= 0:
                print("‚ùå ERRO: O volume precisa ser positivo!")
                continue
            return volume


    @staticmethod
    def obter_tampa():
        while True:
            tem_tampa = input("\nO recipiente tem tampa? (s/n): ").strip().lower()
            if tem_tampa in ['s', 'n']:
                return tem_tampa == 's'
            print("‚ùå ERRO: Digite 's' para sim ou 'n' para n√£o!")

    @staticmethod
    def obter_custos():
        while True:
            try:
                print("\n=== üí∞ CUSTOS DOS MATERIAIS üí∞ ===")
                
                # Recebe o custo da base e valida
                custo_base = input("\nDigite o custo do material da base (R$/cm¬≤): ").strip()
                if ',' in custo_base:
                    print("‚ùå ERRO: Use ponto (.) ao inv√©s de v√≠rgula (,) para separar os decimais!")
                    continue
                if not custo_base.replace('.', '', 1).isdigit():
                    print("‚ùå ERRO: O custo precisa ser um n√∫mero v√°lido!")
                    continue
                custo_base = float(custo_base)
                
                if custo_base <= 0:
                    print("‚ùå ERRO: O custo precisa ser positivo!")
                    continue
                
                # Recebe o custo lateral e valida
                custo_lateral = input("Digite o custo do material lateral (R$/cm¬≤): ").strip()
                if ',' in custo_lateral:
                    print("‚ùå ERRO: Use ponto (.) ao inv√©s de v√≠rgula (,) para separar os decimais!")
                    continue
                if not custo_lateral.replace('.', '', 1).isdigit():
                    print("‚ùå ERRO: O custo precisa ser um n√∫mero v√°lido!")
                    continue
                custo_lateral = float(custo_lateral)
                
                if custo_lateral <= 0:
                    print("‚ùå ERRO: O custo precisa ser positivo!")
                    continue
                
                return custo_base, custo_lateral
            except ValueError:
                print("‚ùå ERRO: O custo precisa ser um n√∫mero v√°lido!")